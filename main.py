# Despliegue de temperatura usando un OLED y bytearrays
# Muro Andrade Brandon Arturo 20211818
# Tecnológico Nacional de México ITT
# Sistemas programables


import machine
import framebuf
import time
import ssd1306


# Configuración de la pantalla OLED
i2c = machine.I2C(0, sda=machine.Pin(0), scl=machine.Pin(1), freq=400000)
oled = ssd1306.SSD1306_I2C(128, 64, i2c)

# Bytearrays para íconos
icon_fire = bytearray([
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0x1f, 0x0f, 0x03, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0x7f, 0x7f, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x03, 0x0f, 
0x1f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 
0xff, 0xff, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0xe1, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x03, 0x07, 0x0f, 0x01, 0x00, 
0x80, 0xe0, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x03, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 
0xfc, 0xff, 0xff, 0xfe, 0xf8, 0xf8, 0xf0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xf0, 0xe0, 
0xf8, 0xfe, 0xff, 0xff, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xfc, 0xf8, 0xf0, 0xf0, 0xe0, 0xe3, 0xe3, 0xe7, 0xef, 0xef, 0xdf, 0xdf, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xef, 0xe7, 0xe0, 
0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff])

icon_ice = bytearray([
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x1f, 
0x3f, 0x3f, 0x4f, 0x03, 0x03, 0x47, 0x3f, 0x3f, 0x1f, 0x1f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xf3, 0x43, 0x43, 0x43, 0x0f, 0x09, 
0x00, 0x00, 0x00, 0x31, 0x3f, 0x7f, 0x7e, 0xfe, 0xfe, 0xfe, 0x7c, 0x00, 0x00, 0x04, 0xfe, 0xfe, 
0xfe, 0x7e, 0x7f, 0x3f, 0x31, 0x00, 0x00, 0x00, 0x09, 0x0f, 0x43, 0x43, 0x43, 0xf3, 0xf7, 0xff, 
0xff, 0xff, 0x9c, 0x1c, 0x08, 0x1c, 0x1c, 0x3e, 0x7f, 0x7f, 0x7f, 0x3e, 0x3e, 0x1c, 0x1c, 0x88, 
0x80, 0x80, 0x1c, 0x1e, 0x1e, 0x1c, 0x80, 0x80, 0x80, 0x1c, 0x1c, 0x3e, 0x3e, 0x7f, 0x7f, 0x7f, 
0x3e, 0x1c, 0x1c, 0x08, 0x1c, 0x9c, 0xff, 0xff, 0xff, 0xf7, 0xe3, 0xe1, 0xf1, 0xf1, 0xf8, 0xc8, 
0x80, 0x80, 0x80, 0xc6, 0xfe, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x00, 0x00, 0x10, 0x3f, 0x3f, 
0x3f, 0x3f, 0x7f, 0xfe, 0xc6, 0x80, 0x80, 0x80, 0xc8, 0xf8, 0xf1, 0xf1, 0xe1, 0xe3, 0xf7, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 
0xfe, 0xfe, 0xf9, 0xe0, 0xe0, 0xe1, 0xfe, 0xfe, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])

icon_cloud = bytearray([
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 
0xff, 0xdf, 0xdf, 0xdf, 0xff, 0xff, 0xbf, 0xcf, 0xfb, 0xfd, 0xfd, 0xff, 0xff, 0xff, 0xfd, 0xfd, 
0xff, 0xf7, 0xff, 0xfb, 0xfb, 0xfb, 0xfb, 0xf7, 0xff, 0x9f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xcf, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfd, 
0xfd, 0xfd, 0xfb, 0x1f, 0x1f, 0x3f, 0xfd, 0xfd, 0xfd, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0xfb, 0xff, 
0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xfb, 0xfb, 0xf7, 0xef, 0xff, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 
0xff, 0xef, 0xf7, 0xfb, 0xfe, 0xfe, 0xff, 0xfd, 0xfd, 0xfd, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])

# Crear objetos framebuf para los íconos
icon_buffer_fire = framebuf.FrameBuffer1(memoryview(icon_fire), 40, 40)
icon_buffer_ice = framebuf.FrameBuffer1(memoryview(icon_ice), 40, 40)
icon_buffer_cloud = framebuf.FrameBuffer1(memoryview(icon_cloud), 40, 40)

# Función para mostrar el ícono y la temperatura
def display_icon_and_temperature(icon, temperature):
    oled.fill(0)  # Limpiar la pantalla

    # Mostrar ícono
    oled.blit(icon, 0, 28)  # Ajusta la posición 

    # Convertir el valor a cadena
    temp_c_str = "{:.2f}".format(temperature)

    # Mostrar temperatura en la pantalla OLED
    oled.text("Celsius: {}".format(temp_c_str), 10, 10, 1)

    # Mostrar leyenda al lado del ícono
    if icon == icon_buffer_fire:
        oled.text("Hot temp", 44, 50, 1)  # Ajusta la posición
    elif icon == icon_buffer_ice:
        oled.text("Cold temp", 44, 50, 1)
    elif icon == icon_buffer_cloud:
        oled.text("Nice temp", 44, 50, 1)

    oled.show()  # Actualizar la pantalla

# Configuración del sensor de temperatura
adc = machine.ADC(4)  # Puerto analógico A4

while True:
    ADC_voltage = adc.read_u16() * (3.3 / 65536)
    temperature_celsius = 27 - (ADC_voltage - 0.706) / 0.001721

    # Determinar qué ícono mostrar según la temperatura
    if temperature_celsius < 25:
        display_icon_and_temperature(icon_buffer_ice, temperature_celsius)
    elif 25 <= temperature_celsius < 30:
        display_icon_and_temperature(icon_buffer_cloud, temperature_celsius)
    else:
        display_icon_and_temperature(icon_buffer_fire, temperature_celsius)

    # Imprimir temperatura en la consola (para referencia)
    print("Celsius: {:.2f}".format(temperature_celsius))

    # Esperar antes de la próxima lectura
    time.sleep_ms(500)



